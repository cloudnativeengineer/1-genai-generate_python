import os
from typing import Dict

import openai
from termcolor import colored


def get_openai_api_key() -> str:
    """Retrieve the OpenAI API key from environment variables.

    Raises:
        ValueError: If the API key is not found in the environment variable.

    Returns:
        str: The OpenAI API key.
    """
    key = os.environ.get('OPENAI_API_KEY')
    if not key:
        raise ValueError("API key not found in the environment variable 'OPENAI_API_KEY'.")
    return key


def generate_response_from_chat(model_name: str, system_message: str, user_message: str) -> str:
    """Query the OpenAI API for the assistant's response.

    Args:
        model_name (str): Name of the OpenAI model to be used.
        system_message (str): System message setting context for the conversation.
        user_message (str): User message to generate a response to.

    Returns:
        str: Assistant's response generated by OpenAI.
    """
    response = openai.ChatCompletion.create(
        model=model_name,
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message}
        ]
    )
    return response.choices[0].message['content']


def read_file_content(file_path: str) -> str:
    """Read content of a file.

    Args:
        file_path (str): Path to the file.

    Returns:
        str: Content of the file.
    """
    with open(file_path, 'r') as f:
        return f.read()


def save_output_to_file(content: str, file_name: str) -> None:
    """Save the provided content to a file.

    Args:
        content (str): Content to be saved.
        file_name (str): Name of the file to save the content in.
    """
    with open(file_name, 'w') as f:
        f.write(content)


def main() -> None:
    """Handle operations for generating a Markdown README for a Python code file using OpenAI.

    The function reads a user prompt (Python code from 'demo.py'), queries OpenAI's model for a markdown readme,
    and saves the result in 'readme.md'.
    """
    openai.api_key = get_openai_api_key()

    MODEL_NAME = "gpt-3.5-turbo-0613"
    SYSTEM_PROMPT = (
        "Given the provided Python code, generate a comprehensive Markdown README file."
    )

    # Assume the Python code is in a file named 'demo.py'.
    code_content = read_file_content('demo.py')

    readme_content = generate_response_from_chat(
        MODEL_NAME, SYSTEM_PROMPT, code_content
    )

    save_output_to_file(readme_content, 'readme.md')

    print(f"README.md written with the following content: \n{readme_content}")


if __name__ == '__main__':
    main()
