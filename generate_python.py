import os
import sys
from typing import Dict

import openai
from termcolor import colored


def get_openai_api_key() -> str:
    """Retrieve the OpenAI API key from environment variables.

    Raises:
        ValueError: If the API key is not found in the environment variable.

    Returns:
        str: The OpenAI API key.
    """
    key = os.environ.get('OPENAI_API_KEY')
    if not key:
        raise ValueError("API key not found in the environment variable 'OPENAI_API_KEY'.")
    return key


def generate_response_from_chat(model_name: str, system_message: str, user_message: str) -> str:
    """Query the OpenAI API for the assistant's response.

    Args:
        model_name (str): Name of the OpenAI model to be used.
        system_message (str): System message setting context for the conversation.
        user_message (str): User message to generate a response to.

    Returns:
        str: Assistant's response generated by OpenAI.
    """
    response = openai.ChatCompletion.create(
        model=model_name,
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_message}
        ]
    )
    return response.choices[0].message['content']


def save_output_to_file(output: str, filename: str = 'demo.py') -> None:
    """Save the provided output to a file.

    Args:
        output (str): The content to be saved.
        filename (str, optional): The name of the file. Defaults to 'demo.py'.
    """
    with open(filename, 'w') as f:
        f.write(output)


def main() -> None:
    """Handle operations for code generation/improvements using OpenAI.

    The function reads a user prompt, performs transformations and improvements
    on it using OpenAI's model, and prints each transformation with a specific color.
    """
    openai.api_key = get_openai_api_key()

    # Configurations
    OPERATIONS: Dict[str, str] = {
        "Convert this design spec to python3": 'red',
        "Refactor this code": 'yellow',
        "Refactor this code for clarity and reduce repetitions by incorporating additional functions": 'cyan',
        "Add type hints, function declarations and improve error handling": 'yellow',
        "Ensure function and variable names follow best practices": 'cyan',
        "Add docstrings to this code": 'yellow',
        "Make this code PEP 8, PEP 257 and PEP 484 compliant": 'green'
    }

    MODEL_NAME = "gpt-3.5-turbo-0613"
    SYSTEM_PROMPT = (
        "You excel in Python3 development and follow trusted design patterns. "
        "Do not provide any commentary or explanation."
    )

    if len(sys.argv) < 2:
        raise ValueError("Provide a user prompt as a command line argument in quotes.")

    user_prompt = sys.argv[1]
    current_output = user_prompt

    for operation, color in OPERATIONS.items():
        current_output = generate_response_from_chat(
            MODEL_NAME, SYSTEM_PROMPT, f"{operation}: {current_output}"
        )
        print(colored(f"{operation}: {current_output}", color))

    save_output_to_file(current_output)


if __name__ == '__main__':
    main()
